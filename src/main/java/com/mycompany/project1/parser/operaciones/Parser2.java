
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.mycompany.project1.parser.operaciones;

import com.mycompany.project1.tablasimbolos.Tabla;
import com.mycompany.project1.operaciones.Operador;
import com.mycompany.project1.parser.Manejador;
import com.mycompany.project1.tablasimbolos.Variable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Parser2Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\006\003\000\002\007" +
    "\003\000\002\002\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\003\000\002\004\005\000\002\004\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\012\007\004\010\015\011\007\012\010\001" +
    "\002\000\012\002\ufff8\004\ufff8\005\ufff8\006\ufff8\001\002" +
    "\000\004\002\024\001\002\000\004\002\000\001\002\000" +
    "\012\002\ufff5\004\ufff5\005\ufff5\006\ufff5\001\002\000\012" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\001\002\000\012\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\001\002\000\012\002\ufffb" +
    "\004\ufffb\005\ufffb\006\021\001\002\000\004\002\uffff\001" +
    "\002\000\010\002\ufffe\004\016\005\017\001\002\000\012" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\001\002\000\012\007" +
    "\004\010\015\011\007\012\010\001\002\000\012\007\004" +
    "\010\015\011\007\012\010\001\002\000\012\002\ufffc\004" +
    "\ufffc\005\ufffc\006\021\001\002\000\012\007\004\010\015" +
    "\011\007\012\010\001\002\000\012\002\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\001\002\000\012\002\ufffd\004\ufffd\005\ufffd" +
    "\006\021\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\016\002\012\003\013\004\011\005\010\006" +
    "\004\007\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\022\005\010\001" +
    "\001\000\006\004\017\005\010\001\001\000\002\001\001" +
    "\000\004\005\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        private Tabla tabla;
        private Manejador m = new Manejador(tabla);
        private Variable tmp;
        private String Errores = "";
        
	public Parser2(Lexer2 lexer,Tabla tabla){
		super(lexer);
		this.tabla = tabla;
	}   
        
        public String getErrores(){
            return Errores;
        }
        
        public Variable getVariable(){
            return tmp;
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser2$actions {
  private final Parser2 parser;

  /** Constructor */
  CUP$Parser2$actions(Parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser2$do_action_part00000000(
    int                        CUP$Parser2$act_num,
    java_cup.runtime.lr_parser CUP$Parser2$parser,
    java.util.Stack            CUP$Parser2$stack,
    int                        CUP$Parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser2$result;

      /* select the action based on the action number */
      switch (CUP$Parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		RESULT = start_val;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser2$parser.done_parsing();
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Initial ::= mensaje 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = n1;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Initial",4, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mensaje ::= operacion 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT =  n1;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("mensaje",5, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // operacion ::= a 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = Operador.Convertir(n1);
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("operacion",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // a ::= a ADD b 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = Operador.Op(n1,n2,1); 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // a ::= a MENOS b 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = Operador.Op(n1,n2,2); 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // a ::= b 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = n1;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // b ::= b MULT c 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = Operador.Op(n1,n2,3);
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // b ::= c 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = n1;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // c ::= INT 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = String.valueOf(n1);
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // c ::= FLOAT 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = String.valueOf(n1);
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // c ::= ID 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		if(tabla.Buscar(n1) != null) {RESULT = tabla.Buscar(n1).getValor(); tmp = tabla.Buscar(n1);}
                                         else  {Errores = "La variable: " + n1 + " no existe"; RESULT = "";}
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // c ::= STRING 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT =  n1.substring(1,n1.length()-1);
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser2$do_action(
    int                        CUP$Parser2$act_num,
    java_cup.runtime.lr_parser CUP$Parser2$parser,
    java.util.Stack            CUP$Parser2$stack,
    int                        CUP$Parser2$top)
    throws java.lang.Exception
    {
              return CUP$Parser2$do_action_part00000000(
                               CUP$Parser2$act_num,
                               CUP$Parser2$parser,
                               CUP$Parser2$stack,
                               CUP$Parser2$top);
    }
}

}
