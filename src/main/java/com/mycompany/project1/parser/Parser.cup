package com.mycompany.project1.parser;
import com.mycompany.project1.tablasimbolos.Tabla;
import com.mycompany.project1.operaciones.Operador;
import java.util.ArrayList;
class Parser;

parser code {:
        private Tabla tabla = new Tabla();
        private Manejador m = new Manejador(tabla);
        private ArrayList<Operacion> Operaciones = new ArrayList<Operacion>();
        
	public Parser(Lexer lexer){
		super(lexer);
	}
        
        public Manejador getM(){
            return m;
        }

        public String getSalida(){
            return m.getMensaje();
        }

        @Override
        public void syntax_error(java_cup.runtime.Symbol s){
            try{
                Token T = (Token) s.value;
                if(T.getValue() != null)
                m.Error("Error con: " + T.getValue() + " LINEA: " + T.getLine());
                else
                m.Error("Error con: " + ParserSym.terminalNames[T.getType()] + " LINEA: " + T.getLine());
            }catch(Exception e){
                
                m.Error("Error con: " + s.value + " LINEA: " + s.left);
                
            }
        } 
        
        @Override
        public void report_error(String message, Object info) {
        
        }
    
        @Override
        public void unrecovered_syntax_error(java_cup.runtime.Symbol s) throws java.lang.Exception{
        }   
        
:}


//TERMINALES
terminal Token ENTERO,CADENA,DECIMAL,SI,SINO,PAREN_O,PAREN_C,PCOMA,ADD,MENOS,
MULT,IGUAL,LEER,ESCRIBIR,MIENTRAS,MAYOR,MENOR,IGUALC,PARA,COMA,MAYORIG,MENORIG,
DIFERENTE,SWITCH,DPUNTOS,CASO,LLAVE_A,LLAVE_C,DEFECTO;
terminal Integer INT;
terminal Double FLOAT;
terminal String STRING,ID;



//NO TERMINALES
non terminal mientras,bucle,pr2,switch,caso,caso2;

non terminal Integer op,tipo,para,condicion,si;

non terminal Operacion production,pr,Initial,asignacion,casos,defecto;

non terminal String mensaje,escribir,leer,operacion,a,b,c,switchCondicion;

start with Initial;


/****GRAMATICA*****/

Initial         ::= pr2 Initial                  {::}
                |   bucle Initial                {::}
                |   bucle                        {::}
                |   pr2                          {::}
                ;


pr              ::= production:n1 PCOMA            {:RESULT = n1;:}
                ;

pr2             ::= production:n1 PCOMA          {:m.Operacion(n1);:}
                ;

production      ::= asignacion:n1          {:RESULT = n1;:}
                |   leer:n1                {:RESULT = new Operacion(1,n1);:}
                |   escribir:n1            {:RESULT = new Operacion(2,n1);:}
                ;

bucle           ::= si                                 {::}
                |   mientras                           {::}
                |   para:n1 pr:n2                      {:for(int i=0;i<n1;i++){m.Operacion(n2);}:}
                |   switch                             {::}
                ;

tipo            ::= ENTERO:n1  {:RESULT = 1;:}
                |   CADENA:n1  {:RESULT = 3;:}
                |   DECIMAL:n1 {:RESULT = 2;:}
                ;

asignacion      ::= tipo:n2 ID:n1 IGUAL mensaje:n3   {:m.Asignacion(n1,n3,n2);RESULT = new Operacion(4," c"," ");:}
                |   tipo:n2 ID:n1                    {:m.Asignacion(n1,null,n2);RESULT = new Operacion(4," "," ");:}
                |   ID:n1 IGUAL mensaje:n2           {:RESULT = new Operacion(3,n1,n2);:}
                ;

si              ::= SI condicion:n1 pr:n2   {:if(n1==1)m.Operacion(n2); RESULT = n1;:}
                |   si:n1 SINO pr:n2        {:if(n1==2) m.Operacion(n2);:}
                ;

condicion       ::= PAREN_O mensaje:n1 op:n3 mensaje:n2 PAREN_C         {:RESULT = m.Condicion(n1,n2,n3);:} 
                ;

op              ::= MAYOR                       {:RESULT = 1;:}
                |   MENOR                       {:RESULT = 2;:}
                |   IGUALC IGUALC               {:RESULT = 3;:}
                |   MAYORIG                     {:RESULT = 4;:}
                |   MENORIG                     {:RESULT = 5;:}
                |   DIFERENTE                   {:RESULT = 6;:}
                ;

para            ::= PARA PAREN_O  INT:n1 COMA INT:n2  PAREN_C {:RESULT = Math.abs(n1-n2);System.out.println("i: " + RESULT);:}
                ;

mientras        ::= MIENTRAS condicion:n1 LLAVE_A Initial LLAVE_C  {:m.Mientras(Operaciones);:}
                ;

switch          ::= SWITCH switchCondicion:n1 LLAVE_A casos:n2     {:m.Switch(Operaciones,n1,n2); Operaciones = new ArrayList<Operacion>();:}
                ;

switchCondicion ::= PAREN_O mensaje:n1 PAREN_C                     {:RESULT = n1;:} 
                ;

casos           ::= caso2 defecto:n1                       {:RESULT = n1;:}
                ;

caso2           ::= caso caso2                          {::}
                |   caso                                {::}
                ;

caso            ::= CASO mensaje:n2 DPUNTOS pr:n1                     {:Operaciones.add(new Operacion(n1,n2));:}
                ;

defecto         ::= DEFECTO DPUNTOS pr:n1  LLAVE_C                        {:RESULT =n1;:}
                |   LLAVE_C     
                ;

leer            ::= LEER PAREN_O ID:n1 PAREN_C    {:RESULT = n1;:}
                ;

mensaje         ::= operacion:n1        {:RESULT =  n1;:}
                |   STRING:n1           {:RESULT =  n1.substring(1,n1.length()-1);:}
                ;
                
escribir        ::= ESCRIBIR PAREN_O mensaje:n1 PAREN_C    {:RESULT = n1;:}
                ;


operacion       ::= a:n1  {:RESULT = Operador.Convertir(n1);:}
                ;

a               ::= a:n1 ADD b:n2   {:RESULT = Operador.Op(n1,n2,1); :}
                |   a:n1 MENOS b:n2 {:RESULT = Operador.Op(n1,n2,2); :}
                |   b:n1            {:RESULT = n1;:} 
                ;

b               ::= b:n1 MULT c:n2   {:RESULT = Operador.Op(n1,n2,3);:}
                |   c:n1             {:RESULT = n1;:}
                ;

c               ::= INT:n1             {:RESULT = String.valueOf(n1);:}
                |   FLOAT:n1           {:RESULT = String.valueOf(n1);:}
                |   ID:n1              {:if(!m.VerificarExistencia(n1)) RESULT = tabla.Buscar(n1).getValor();
                                         else m.Error("La variable: " + n1 + " no existe");:}
                ;