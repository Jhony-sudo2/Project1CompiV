package com.mycompany.project1.parser;
import com.mycompany.project1.tablasimbolos.Tabla;
import com.mycompany.project1.operaciones.*;
import com.mycompany.project1.tablasimbolos.TablaFuncion;
import com.mycompany.project1.tablasimbolos.Variable;
import java.util.ArrayList;
import java.util.Arrays;
class Parser;

parser code {:
        private Tabla tabla = new Tabla();
        private TablaFuncion funciones = new TablaFuncion();
        private Manejador m = new Manejador(tabla);
        
        private ArrayList<Casos> Casos = new ArrayList<Casos>();
        private int Condicion = 0;

        public Parser(Lexer lexer){
		super(lexer);
	}
        
        public Manejador getM(){
            return m;
        }

        public String getSalida(){
            return m.getMensaje();
        }

        @Override
        public void syntax_error(java_cup.runtime.Symbol s){
            try{
                Token T = (Token) s.value;
                if(T.getValue() != null)
                m.Error("Error con: " + T.getValue() + " LINEA: " + T.getLine());
                else
                m.Error("Error con: " + ParserSym.terminalNames[T.getType()] + " LINEA: " + T.getLine());
            }catch(Exception e){
                
                m.Error("Error con: " + s.value + " LINEA: " + s.left);
                
            }
        } 
        
        @Override
        public void report_error(String message, Object info) {
        
        }
    
        @Override
        public void unrecovered_syntax_error(java_cup.runtime.Symbol s) throws java.lang.Exception{
        }   

        public ArrayList<Operacion> Unir(Operacion x,ArrayList<Operacion> y){
            ArrayList<Operacion>Resultado = new ArrayList<>();
            Resultado.add(x);
            Resultado.addAll(y);
            return Resultado;
        }

        public ArrayList<Operacion> Retornar(Operacion x){
            ArrayList<Operacion>Resultado = new ArrayList<>();
            Resultado.add(x);
            return Resultado;
        }
        
        public ArrayList<Variable> UnirP(Variable x,ArrayList<Variable> y){
            ArrayList<Variable>Resultado = new ArrayList<>();
            Resultado.add(x);
            Resultado.addAll(y);
            return Resultado;
        }

        public ArrayList<Variable> RetornarP(Variable x){
            ArrayList<Variable>Resultado = new ArrayList<>();
            Resultado.add(x);
            return Resultado;
        }
        
        
:}


//TERMINALES
terminal Token ENTERO,CADENA,DECIMAL,SI,SINO,PAREN_O,PAREN_C,PCOMA,ADD,MENOS,
MULT,IGUAL,LEER,ESCRIBIR,MIENTRAS,MAYOR,MENOR,IGUALC,PARA,COMA,MAYORIG,MENORIG,
DIFERENTE,SWITCH,DPUNTOS,CASO,LLAVE_A,LLAVE_C,DEFECTO,FUNCION,VOID,RETORNAR;
terminal Integer INT;
terminal Double FLOAT;
terminal String STRING,ID;



//NO TERMINALES
non terminal caso,caso2;

non terminal Integer op,tipo,para,tiporetorno;

non terminal Condicion condicion;

non terminal Operacion production,pr,asignacion,casos,defecto,mientras,switch,si,bucle,escribir,leer,funcion,llamadaf;

non terminal String mensaje,operacion,a,b,c,switchCondicion,retorno;
non terminal ArrayList<Operacion> Initial;
non terminal ArrayList<Variable>  parametros,parametros2;
non terminal ArrayList<String>    parametrosllamada,pllamada;
start with Initial;


/****GRAMATICA*****/

Initial         ::= pr:n1 Initial:n2                  {:RESULT = Unir(n1,n2);:}
                |   pr:n1                             {:RESULT = Retornar(n1);:}
                ;


pr              ::= production:n1 PCOMA            {:RESULT = n1;:}
                |   bucle:n1                       {:RESULT = n1;:}
                ;


production      ::= asignacion:n1          {:RESULT = n1;:}
                |   leer:n1                {:RESULT = n1;:}
                |   escribir:n1            {:RESULT = n1;:}
                |   llamadaf:n1            {:RESULT = n1;:}
                ;

bucle           ::= si:n1                                   {:RESULT = n1; Condicion = 0;:}
                |   mientras:n1                             {:RESULT = n1;:}
                |   para:n1 LLAVE_A Initial:n2 LLAVE_C      {:RESULT = new Para(tabla,n2,n1);:}
                |   switch:n1                               {:RESULT = n1;:}
                |   funcion:n1                              {:RESULT = n1;:}             
                ;

tipo            ::= ENTERO:n1  {:RESULT = 1;:}
                |   CADENA:n1  {:RESULT = 3;:}
                |   DECIMAL:n1 {:RESULT = 2;:}
                ;

asignacion      ::= tipo:n2 ID:n1 IGUAL:n4 mensaje:n3   {:RESULT = new OVariable(tabla,n2,n1,n3,1,n4.getLine());:}
                |   tipo:n2 ID:n1                    {:RESULT = new OVariable(tabla,n2,n1,"",1,0);:}
                |   ID:n1 IGUAL:n3 mensaje:n2           {:RESULT = new OVariable(tabla,1,n1,n2,2,n3.getLine());:}
                |   tipo:n2 ID:n1 IGUAL:n4 llamadaf:n3  {:RESULT = new OVariable(tabla,n2,n1,(OFuncion)n3,1,n4.getLine());:}
                |   ID:n1 IGUAL:n3 llamadaf:n2          {:RESULT = new OVariable(tabla,1,n1,(OFuncion)n2,2,n3.getLine());:}
                ;

si              ::= SI condicion:n1 LLAVE_A Initial:n2 LLAVE_C   {:RESULT = new Si(tabla,n1,n2,null);:}
                |   si:n1 SINO LLAVE_A Initial:n2 LLAVE_C        {:RESULT = new Si(tabla,(Si)n1,null,n2);:}
                ;

condicion       ::= PAREN_O mensaje:n1 op:n3 mensaje:n2 PAREN_C         {:RESULT = new Condicion(n1,n2,n3);:} 
                ;

op              ::= MAYOR                       {:RESULT = 1;:}
                |   MENOR                       {:RESULT = 2;:}
                |   IGUALC IGUALC               {:RESULT = 3;:}
                |   MAYORIG                     {:RESULT = 4;:}
                |   MENORIG                     {:RESULT = 5;:}
                |   DIFERENTE                   {:RESULT = 6;:}
                ;

para            ::= PARA PAREN_O  INT:n1 COMA INT:n2  PAREN_C {:RESULT = Math.abs(n1-n2);System.out.println("i: " + RESULT);:}
                ;

mientras        ::= MIENTRAS condicion:n1 LLAVE_A Initial:n2 LLAVE_C  {:RESULT = new Mientras(n2,n1,tabla);:}
                ;

switch          ::= SWITCH:n3 switchCondicion:n1 LLAVE_A casos:n2     {:RESULT = new Switch(tabla,n1,n2,Casos,n3.getLine()); Casos = new ArrayList<Casos>();:}
                ;

switchCondicion ::= PAREN_O mensaje:n1 PAREN_C                     {:RESULT = n1;:} 
                ;

casos           ::= caso2 defecto:n1                       {:RESULT = n1;:}
                ;

caso2           ::= caso caso2                          {::}
                |   caso                                {::}
                ;

caso            ::= CASO mensaje:n2 DPUNTOS Initial:n1                     {:Casos.add(new Casos(n2,n1));:}
                 ;

defecto         ::= DEFECTO DPUNTOS pr:n1  LLAVE_C                        {:RESULT =n1;:}
                |   LLAVE_C     
                ;

leer            ::= LEER:n2 PAREN_O ID:n1 PAREN_C    {:RESULT = new Salida(tabla,n1,2,n2.getLine());:}
                ;

mensaje         ::= operacion:n1        {:RESULT =  n1;:}
                ;
                
escribir        ::= ESCRIBIR:n2 PAREN_O mensaje:n1 PAREN_C    {:RESULT = new Salida(tabla,n1,1,n2.getLine());:}
                |   ESCRIBIR:n2 PAREN_O llamadaf:n1 PAREN_C       {:RESULT = new Salida(tabla,(OFuncion)n1,n2.getLine());:}
                ;

funcion         ::= FUNCION:n6 tiporetorno:n2 ID:n1  PAREN_O parametros2:n5 LLAVE_A Initial:n3 retorno:n4  {:RESULT = new OFuncion(funciones,n1,n2,n3,n4,n5,n6.getLine());:}
                |   FUNCION:n6 tiporetorno:n2 ID:n1  PAREN_O parametros2:n5 LLAVE_A retorno:n4             {:RESULT = new OFuncion(funciones,n1,n2,null,n4,n5,n6.getLine());:}
                ;

tiporetorno     ::= VOID    {:RESULT = 0;:}
                |   ENTERO  {:RESULT = 1;:}
                |   CADENA  {:RESULT = 2;:}
                |   DECIMAL {:RESULT = 3;:}
                ;

retorno         ::= RETORNAR mensaje:n1 PCOMA LLAVE_C   {:RESULT = n1;:}
                |   LLAVE_C                             {::}
                ;

parametros2     ::= parametros:n1 PAREN_C  {:RESULT = n1;:}
                |   PAREN_C                {::}
                ;

parametros      ::= tipo:n1 ID:n2 COMA  parametros:n3       {:RESULT = UnirP(new Variable(n2,n1),n3);:}
                |   tipo:n1 ID:n2                     {:RESULT = RetornarP(new Variable(n2,n1));:}
                ;

llamadaf        ::= ID:n1 PAREN_O:n3 pllamada:n2     {:RESULT = new OFuncion(funciones,tabla,n1,n2,n3.getLine());:}
                ;

pllamada        ::= parametrosllamada:n1 PAREN_C     {:RESULT = n1;:}
                |   PAREN_C
                ;

parametrosllamada ::= mensaje:n1 COMA parametrosllamada:n2     {:n2.add(0,n1); RESULT = n2;:}
                  |   mensaje:n1                               {:RESULT = new ArrayList<String>(Arrays.asList(n1));:}  
                  ;

operacion       ::= a:n1  {:RESULT = n1;:}
                ;

a               ::= a:n1 ADD b:n2   {:RESULT = n1 + "+"+n2; :}
                |   a:n1 MENOS b:n2 {:RESULT = n1 + "-"+n2; :}
                |   b:n1            {:RESULT = n1;:} 
                ;

b               ::= b:n1 MULT c:n2   {:RESULT = n1 + "*" + n2;:}
                |   c:n1             {:RESULT = n1;:}
                ;

c               ::= INT:n1             {:RESULT = String.valueOf(n1);:}
                |   FLOAT:n1           {:RESULT = String.valueOf(n1);:}
                |   ID:n1              {:RESULT = n1;:}
                |   STRING:n1          {:RESULT = n1;:}
                ;