
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.mycompany.project1.parser;

import com.mycompany.project1.tablasimbolos.Tabla;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\014\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\005\003\000" +
    "\002\005\004\000\002\005\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\003\006\000\002\003" +
    "\004\000\002\003\005\000\002\012\005\000\002\012\005" +
    "\000\002\011\007\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\010\010\000\002\004\004\000\002\023" +
    "\006\000\002\021\003\000\002\021\003\000\002\022\006" +
    "\000\002\015\003\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\017\005\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\024\004\023\005\006\006\007\007\020\020" +
    "\010\021\021\022\024\026\013\036\014\001\002\000\016" +
    "\004\023\005\006\006\007\020\010\021\021\036\014\001" +
    "\002\000\004\036\111\001\002\000\004\036\ufff5\001\002" +
    "\000\004\036\ufff4\001\002\000\004\011\106\001\002\000" +
    "\016\004\023\005\006\006\007\020\010\021\021\036\014" +
    "\001\002\000\024\004\023\005\006\006\007\007\020\020" +
    "\010\021\021\022\024\026\013\036\014\001\002\000\004" +
    "\011\077\001\002\000\004\017\075\001\002\000\004\013" +
    "\ufffc\001\002\000\004\013\ufffa\001\002\000\004\002\074" +
    "\001\002\000\004\011\033\001\002\000\004\011\067\001" +
    "\002\000\026\002\ufffe\004\023\005\006\006\007\007\020" +
    "\020\010\021\021\022\024\026\013\036\014\001\002\000" +
    "\004\036\ufff6\001\002\000\004\011\033\001\002\000\004" +
    "\013\ufffb\001\002\000\026\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\031\020\ufff9\021\ufff9\022\ufff9\026\ufff9\036\ufff9" +
    "\001\002\000\004\013\030\001\002\000\030\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\026\ufffd\036\ufffd\001\002\000\016\004\023\005" +
    "\006\006\007\020\010\021\021\036\014\001\002\000\026" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\020\uffef\021" +
    "\uffef\022\uffef\026\uffef\036\uffef\001\002\000\012\033\035" +
    "\034\045\035\037\036\040\001\002\000\016\004\uffe6\005" +
    "\uffe6\006\uffe6\020\uffe6\021\uffe6\036\uffe6\001\002\000\030" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\030\uffdb\031\uffdb\032\uffdb\001\002\000\016" +
    "\023\060\024\057\025\054\030\061\031\056\032\055\001" +
    "\002\000\022\012\uffe3\013\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\001\002\000\030\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\001\002\000\030\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\001\002\000\030\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\051\023\uffde\024\uffde\025\uffde" +
    "\030\uffde\031\uffde\032\uffde\001\002\000\022\012\uffe4\013" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\001\002\000\026\012\uffe1\013\uffe1\014\046\015\047\023" +
    "\uffe1\024\uffe1\025\uffe1\030\uffe1\031\uffe1\032\uffe1\001\002" +
    "\000\030\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\023" +
    "\uffda\024\uffda\025\uffda\030\uffda\031\uffda\032\uffda\001\002" +
    "\000\010\033\035\034\045\036\040\001\002\000\010\033" +
    "\035\034\045\036\040\001\002\000\030\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\051\023\uffdf\024\uffdf\025\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\001\002\000\010\033\035\034\045" +
    "\036\040\001\002\000\030\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\023\uffdd\024\uffdd\025\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\001\002\000\030\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\051\023\uffe0\024\uffe0\025\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\001\002\000\004\025\065\001\002\000\012\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\001\002\000\012\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\001\002\000\012\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\001\002\000\012\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\001\002\000\012\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\001\002\000\012\033\035\034\045\035\037" +
    "\036\040\001\002\000\004\012\064\001\002\000\016\004" +
    "\uffee\005\uffee\006\uffee\020\uffee\021\uffee\036\uffee\001\002" +
    "\000\012\033\uffeb\034\uffeb\035\uffeb\036\uffeb\001\002\000" +
    "\004\002\000\001\002\000\012\033\035\034\045\035\037" +
    "\036\040\001\002\000\004\012\071\001\002\000\004\013" +
    "\uffe2\001\002\000\016\004\023\005\006\006\007\020\010" +
    "\021\021\036\014\001\002\000\026\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\020\ufff0\021\ufff0\022\ufff0\026\ufff0" +
    "\036\ufff0\001\002\000\004\002\001\001\002\000\012\033" +
    "\035\034\045\035\037\036\040\001\002\000\004\013\ufff1" +
    "\001\002\000\004\033\100\001\002\000\004\027\101\001" +
    "\002\000\004\033\102\001\002\000\004\012\103\001\002" +
    "\000\016\004\uffe7\005\uffe7\006\uffe7\020\uffe7\021\uffe7\036" +
    "\uffe7\001\002\000\004\002\uffff\001\002\000\024\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\020\ufff8\021\ufff8\022\ufff8\026" +
    "\ufff8\036\ufff8\001\002\000\004\036\107\001\002\000\004" +
    "\012\110\001\002\000\004\013\uffe5\001\002\000\006\013" +
    "\ufff2\017\112\001\002\000\012\033\035\034\045\035\037" +
    "\036\040\001\002\000\004\013\ufff3\001\002\000\024\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\026\ufff7\036\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\030\002\016\003\014\004\010\005\011\007" +
    "\004\010\003\012\025\013\026\014\021\022\015\023\024" +
    "\001\001\000\016\003\014\007\004\013\026\014\113\022" +
    "\015\023\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\014\007" +
    "\004\013\026\014\104\022\015\023\024\001\001\000\030" +
    "\002\103\003\014\004\010\005\011\007\004\010\003\012" +
    "\025\013\026\014\021\022\015\023\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\071\001\001\000\002" +
    "\001\001\000\030\002\065\003\014\004\010\005\011\007" +
    "\004\010\003\012\025\013\026\014\021\022\015\023\024" +
    "\001\001\000\002\001\001\000\004\011\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\014\007\004\013\026\014\031\022" +
    "\015\023\024\001\001\000\002\001\001\000\014\015\042" +
    "\016\043\017\041\020\040\021\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\052\020\040\001\001\000\006\017\047\020" +
    "\040\001\001\000\002\001\001\000\004\020\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\042\016\043\017" +
    "\041\020\040\021\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\042\016\043\017\041\020\040\021\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\014\007\004\013" +
    "\026\014\072\022\015\023\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\042\016\043\017\041\020" +
    "\040\021\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\042\016\043\017\041\020\040\021\112" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        private Tabla tabla = new Tabla();
        private Manejador m = new Manejador(tabla);

	public Parser(Lexer lexer){
		super(lexer);
	}

        public String getSalida(){
            return m.getMensaje();
        }

        @Override
        public void syntax_error(java_cup.runtime.Symbol s){
            Token T = (Token) s.value;
            if(T.getValue() != null)
            System.out.println("Error con: " + T.getValue());
            else
            System.out.println("Error con: " + T.getType());
        } 
        
        @Override
        public void report_error(String message, Object info) {
        
        }
    
        @Override
        public void unrecovered_syntax_error(java_cup.runtime.Symbol s) throws java.lang.Exception{
        }   
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Initial ::= pr Initial 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Initial ::= bucle Initial 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Initial ::= pr 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pr ::= production PCOMA 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = n1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // production ::= asignacion 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("production",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // production ::= leer 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		m.Leer(n1); RESULT = new Operacion(1,n1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("production",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // production ::= escribir 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		m.Escribir(n1); RESULT = new Operacion(2,n1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("production",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bucle ::= si 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bucle ::= mientras pr 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bucle ::= para pr 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		for(int i=0;i<n1;i++){m.Operacion(n2.getTipo(),n2.getMensaje());}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= ENTERO 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = 1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= CADENA 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = 3;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= DECIMAL 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = 2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= tipo ID IGUAL mensaje 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		m.Asignacion(n1,n3,n2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion ::= tipo ID 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		m.Asignacion(n1,null,n2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacion ::= ID IGUAL mensaje 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		m.Actualizar(n1,n2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // si ::= SI condicion pr 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(n1==1)m.Operacion(n2.getTipo(),n2.getMensaje()); RESULT = n1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // si ::= si SINO pr 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(n1==2) m.Operacion(n2.getTipo(),n2.getMensaje());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("si",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicion ::= PAREN_O mensaje op mensaje PAREN_C 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = m.Condicion(n1,n2,n3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op ::= MAYOR 
            {
              Integer RESULT =null;
		RESULT = 1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op ::= MENOR 
            {
              Integer RESULT =null;
		RESULT = 2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op ::= IGUALC IGUALC 
            {
              Integer RESULT =null;
		RESULT = 3;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op ::= MAYORIG 
            {
              Integer RESULT =null;
		RESULT = 4;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op ::= MENORIG 
            {
              Integer RESULT =null;
		RESULT = 5;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op ::= DIFERENTE 
            {
              Integer RESULT =null;
		RESULT = 6;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // para ::= PARA PAREN_O INT COMA INT PAREN_C 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = Math.abs(n1-n2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("para",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mientras ::= MIENTRAS condicion 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mientras",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // leer ::= LEER PAREN_O ID PAREN_C 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = n1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("leer",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mensaje ::= operacion 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = String.valueOf(n1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mensaje ::= STRING 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =  n1.substring(1,n1.length()-1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mensaje",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // escribir ::= ESCRIBIR PAREN_O mensaje PAREN_C 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = n1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escribir",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion ::= a 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // a ::= a ADD b 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =n1 + n2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // a ::= a MENOS b 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =n1 - n2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // a ::= b 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // b ::= b MULT c 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n1*n2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // b ::= c 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // c ::= INT 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Double.parseDouble(String.valueOf(n1));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // c ::= FLOAT 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Double.parseDouble(String.valueOf(n1));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // c ::= ID 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(m.VerificarExistencia(n1)) RESULT = Double.parseDouble(String.valueOf(tabla.Buscar(n1).getValor()));
                                         else System.out.println("LA VARIABLE NO EXISTE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
